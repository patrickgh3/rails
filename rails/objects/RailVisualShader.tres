[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 0, 1, 0.00784314, 1 )

[sub_resource type="VisualShaderNodeBooleanUniform" id=2]
uniform_name = "is_target"

[sub_resource type="VisualShaderNodeSwitch" id=3]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 0

[sub_resource type="VisualShaderNodeScalarSwitch" id=6]
default_input_values = [ 0, false, 1, 1.0, 2, 0.3 ]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarInterp" id=10]
default_input_values = [ 0, 0.15, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeSwitch" id=11]

[sub_resource type="VisualShaderNodeColorConstant" id=12]
constant = Color( 0.484528, 1, 0.480469, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=13]

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0, 1, 1, 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "glow"

[sub_resource type="VisualShaderNodeVectorScalarMix" id=16]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, 0.8 ]

[sub_resource type="VisualShaderNodeScalarInterp" id=17]
default_input_values = [ 0, 0.5, 1, 1.0, 2, 0.0 ]

[resource]
code = "shader_type spatial;
render_mode blend_add, specular_schlick_ggx, unshaded;

uniform bool is_target;
uniform float glow;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:14
	bool n_out14p0 = is_target;

// Color:10
	vec3 n_out10p0 = vec3(0.000000, 1.000000, 0.007843);
	float n_out10p1 = 1.000000;

// Color:3
	vec3 n_out3p0 = vec3(0.000000, 1.000000, 1.000000);
	float n_out3p1 = 1.000000;

// VectorSwitch:16
	vec3 n_out16p0;
	if(n_out14p0)
	{
		n_out16p0 = n_out10p0;
	}
	else
	{
		n_out16p0 = n_out3p0;
	}

// Color:27
	vec3 n_out27p0 = vec3(0.484528, 1.000000, 0.480469);
	float n_out27p1 = 1.000000;

// Color:28
	vec3 n_out28p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out28p1 = 1.000000;

// VectorSwitch:26
	vec3 n_out26p0;
	if(n_out14p0)
	{
		n_out26p0 = n_out27p0;
	}
	else
	{
		n_out26p0 = n_out28p0;
	}

// ScalarUniform:5
	float n_out5p0 = glow;

// VectorScalarMix:7
	vec3 n_out7p0 = mix(n_out16p0, n_out26p0, n_out5p0);

// Input:17
	float n_out17p0 = TIME;

// ScalarOp:23
	float n_in23p1 = 10.00000;
	float n_out23p0 = n_out17p0 * n_in23p1;

// ScalarFunc:18
	float n_out18p0 = sin(n_out23p0);

// ScalarOp:22
	float n_in22p1 = 1.00000;
	float n_out22p0 = n_out18p0 + n_in22p1;

// ScalarOp:24
	float n_in24p1 = 2.00000;
	float n_out24p0 = n_out22p0 / n_in24p1;

// ScalarMix:25
	float n_in25p0 = 0.15000;
	float n_in25p1 = 1.00000;
	float n_out25p0 = mix(n_in25p0, n_in25p1, n_out24p0);

// ScalarSwitch:21
	float n_in21p2 = 0.30000;
	float n_out21p0;
	if(n_out14p0)
	{
		n_out21p0 = n_out25p0;
	}
	else
	{
		n_out21p0 = n_in21p2;
	}

// ScalarMix:9
	float n_in9p1 = 1.00000;
	float n_in9p2 = 0.00000;
	float n_out9p0 = mix(n_out21p0, n_in9p1, n_in9p2);

// Output:0
	ALBEDO = n_out7p0;
	ALPHA = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -468.365, -191.913 )
modes/blend = 1
flags/unshaded = true
nodes/fragment/0/position = Vector2( 700, 0 )
nodes/fragment/3/node = SubResource( 14 )
nodes/fragment/3/position = Vector2( -440, 60 )
nodes/fragment/5/node = SubResource( 15 )
nodes/fragment/5/position = Vector2( 0, 420 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( 220, -140 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( 420, 380 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -440, -40 )
nodes/fragment/14/node = SubResource( 2 )
nodes/fragment/14/position = Vector2( -480, -141 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( -220, -140 )
nodes/fragment/17/node = SubResource( 4 )
nodes/fragment/17/position = Vector2( -1440, 340 )
nodes/fragment/18/node = SubResource( 5 )
nodes/fragment/18/position = Vector2( -1100, 340 )
nodes/fragment/21/node = SubResource( 6 )
nodes/fragment/21/position = Vector2( -240, 340 )
nodes/fragment/22/node = SubResource( 7 )
nodes/fragment/22/position = Vector2( -900, 320 )
nodes/fragment/23/node = SubResource( 8 )
nodes/fragment/23/position = Vector2( -1280, 320 )
nodes/fragment/24/node = SubResource( 9 )
nodes/fragment/24/position = Vector2( -740, 320 )
nodes/fragment/25/node = SubResource( 10 )
nodes/fragment/25/position = Vector2( -560, 300 )
nodes/fragment/26/node = SubResource( 11 )
nodes/fragment/26/position = Vector2( -60, -20 )
nodes/fragment/27/node = SubResource( 12 )
nodes/fragment/27/position = Vector2( -220, 0 )
nodes/fragment/28/node = SubResource( 13 )
nodes/fragment/28/position = Vector2( -220, 100 )
nodes/fragment/connections = PoolIntArray( 7, 0, 0, 0, 5, 0, 7, 2, 9, 0, 0, 1, 14, 0, 16, 0, 10, 0, 16, 1, 3, 0, 16, 2, 16, 0, 7, 0, 14, 0, 21, 0, 21, 0, 9, 0, 22, 0, 24, 0, 17, 0, 23, 0, 23, 0, 18, 0, 18, 0, 22, 0, 24, 0, 25, 2, 25, 0, 21, 1, 27, 0, 26, 1, 28, 0, 26, 2, 26, 0, 7, 1, 14, 0, 26, 0 )
